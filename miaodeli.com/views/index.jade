extends layout

block content
    .container.padding-top-bottom-40
        h1.logo
            | 喵德利
            span /Miaodeli
        p 欢迎来到「喵德利」的官方站点。这里是巨大互联网里的一片小小「技术试验田」。
        h3 阅读大型 JavaScript 源码时有什么好用的工具？
        p 大型 JavaScript 库的源码通常都在万行级别以上（例如 jQuery、AngularJs、NodeJs），而且由于 JavaScript 语言本身的特性，会出现大量的嵌套函数定义，这使得阅读此类项目变得更加困难。我常常想，是否存在一定的工具能够将函数层级关系拆解开，支持导航的方式层层跳转；能够分析标识符引用关系，辅助确定热点函数等？
        p 由于始终没能找到符合上述需求的工具，于是我产生了自己开发的念头，于是 λ-VIEW 诞生了。
        h3 λ-VIEW 介绍
        h4 核心目标：将复杂的 JavaScript 代码拆解开
        p 在详细介绍之前，我们不妨先通过一个实例来了解一下 λ-VIEW 具体有什么用。
        img(src='/my/img/raw-angularjs.jpg')
        p 
            | 上图是原始的 AngularJS 源码，可以看到左侧的行号已经超过 2 万行，直接阅读这样的代码无异于
            strong 划着独木舟在大海里寻找孤岛
            | ，其难度可想而知。不过当我们对其进行处理后（点击上方的 After 按钮），情况就不同了，如下图所示：
        img(src='/my/img/angularjs-processed.jpg')
        p 
            | 诶？2 万行代码怎么只剩下两行了？仔细一看，哦，原来这才是 AngularJS 的「真容」！整个 AngularJS 只是由一个立即调用的匿名函数（这里用 {λ} 表示），以及一行额外的处理代码组成。通常我们阅读代码的原则是——
            strong 先从最外层轮廓上对代码本身获得一个直观的认识，然后再深入到具体的细节里，
            | 这能从根本上避免在刚开始就陷入细节的泥潭。这个工具正是建立在这一原则之上的。或者说，它可以帮助你更好的贯彻这一原则。（我们在稍后会用它来和其他常见的 IDE、文本编辑器进行对比，这会让你对此看得更清楚）
        p 现在我想看看 AngularJS 中的那个匿名函数里到底做了些什么。于是我点击 {λ} 部分，紧接着就变成了下面的样子：
        img(src='/my/img/angularjs-inside.jpg')
        p 你会注意到：
            ol
                li 顶部标识出了当前函数的路径 <Program> / λ-0 （<Program> 代表顶级作用域，而 λ-0 是我们目前所处于的位置，它是顶级作用域下的第 0 号匿名函数）
                li 左侧列举出了当前作用域内定义的子函数
                li 右侧的源代码区域出现的不是原始的 JavaScript 代码，而是经过美化的——花括号都不见了，而是改为使用缩进；分号都去除了；等等
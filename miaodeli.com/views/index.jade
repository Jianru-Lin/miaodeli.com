extends layout

block content
    .container.padding-top-bottom-40
        h1.logo
            | 喵德利
            span /Miaodeli
        p 欢迎来到「喵德利」的官方站点。这里是巨大互联网里的一片小小「技术试验田」。
        h3 阅读大型 JavaScript 源码时有什么好用的工具？
        p 大型 JavaScript 库的源码通常都在万行级别以上（例如 jQuery、AngularJs、NodeJs），而且由于 JavaScript 语言本身的特性，会出现大量的嵌套函数定义，这使得阅读此类项目变得更加困难。我常常想，是否存在一定的工具能够将函数层级关系拆解开，支持导航的方式层层跳转；能够分析标识符引用关系，辅助确定热点函数等？
        p 由于始终没能找到符合上述需求的工具，于是我产生了自己开发的念头，于是 λ-VIEW 诞生了。
        h3 λ-VIEW 介绍
        h4 核心目标：将复杂的 JavaScript 代码拆解开
        p 在详细介绍之前，我们不妨先通过一个实例来了解一下 λ-VIEW 具体有什么用。

        a(href='/my/img/raw-angularjs.jpg', target='_blank')
            img(src='/my/img/raw-angularjs.jpg')
        p.img-title 图 1 原始的 AngularJs 代码
        
        a(href='/my/img/angularjs-inside.jpg', target='_blank')
            img(src='/my/img/angularjs-inside.jpg')
        p.img-title 图 2 经过 λ-VIEW 拆解后的 AngularJs 代码
        p 
            | 图 1 是原始的 AngularJS 源码，可以看到左侧的行号已经超过 2 万行，直接阅读这样的代码无异于
            strong 划着独木舟在大海里寻找孤岛
            | ，其难度可想而知。图 2 则是是经过 λ-VIEW 拆解后的 AngularJS 源码，我们可以看到：
            ol
                li 顶部标识出了当前函数的路径 <Program> / λ-0 （<Program> 代表顶级作用域，而 λ-0 是我们目前所处于的位置，它是顶级作用域下的第 0 号匿名函数）
                li 左侧列举出了当前作用域内定义的子函数
                li 右侧的源代码区域出现的不是原始的 JavaScript 代码，而是经过美化的——花括号都不见了，而是改为使用缩进；分号都去除了；等等